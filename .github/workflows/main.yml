name: Setup EKS, Deploy React App

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    name: Build, Tag, and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.17.1'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG .
    
    - name: Push Docker image to ECR
      run: |
        docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Install kubectl
      run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
    - name: Install eksctl
      run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin/

    - name: Create EKS Cluster
      run: |
          eksctl create cluster --name movie-app-demo --region us-west-1 --nodegroup-name movie-app-demo-nodes --node-type t2.micro --nodes 5
      
    - name: Wait for Cluster to be Ready
      run: |
          aws eks wait cluster-active --name movie-app-demo

    - name: Apply react-app deployment
      run: |
          kubectl apply -f react-app.yaml

env:
  ECR_REPOSITORY: movie-app-demo  # Update with your ECR repository name
  IMAGE_TAG: latest
